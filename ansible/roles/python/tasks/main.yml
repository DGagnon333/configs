---
- name: Detect OS family
  set_fact:
    is_macos: "{{ ansible_os_family == 'Darwin' }}"
    is_debian: "{{ ansible_os_family == 'Debian' }}"
    is_redhat: "{{ ansible_os_family == 'RedHat' }}"

# MacOS specific tasks
- name: Install Python dependencies (MacOS)
  when: is_macos
  community.general.homebrew:
    name:
      - python
      - openssl
      - readline
      - sqlite3
      - xz
      - zlib
    state: present

# Debian/Ubuntu specific tasks
- name: Install Python dependencies (Debian/Ubuntu)
  when: is_debian
  apt:
    name:
      - python3
      - python3-pip
      - python3-dev
      - python3-setuptools
      - python3-venv
      - build-essential
      - libssl-dev
      - zlib1g-dev
      - libbz2-dev
      - libreadline-dev
      - libsqlite3-dev
      - libncurses5-dev
      - xz-utils
      - tk-dev
      - libxml2-dev
      - libxmlsec1-dev
      - libffi-dev
      - liblzma-dev
    state: present
    update_cache: yes
  become: yes

# RedHat/Fedora specific tasks
- name: Install Python dependencies (RedHat/Fedora)
  when: is_redhat
  dnf:
    name:
      - python3
      - python3-pip
      - python3-devel
      - python3-setuptools
      - gcc
      - openssl-devel
      - bzip2-devel
      - libffi-devel
      - zlib-devel
      - readline-devel
      - sqlite-devel
      - tk-devel
    state: present
  become: yes

# Install pyenv
- name: Clone pyenv repository
  git:
    repo: https://github.com/pyenv/pyenv.git
    dest: "{{ ansible_env.HOME }}/.pyenv"
    update: yes

- name: Add pyenv to shell configuration
  blockinfile:
    path: "{{ ansible_env.HOME }}/.{{ item }}"
    create: yes
    marker: "# {mark} PYENV CONFIGURATION"
    block: |
      export PYENV_ROOT="$HOME/.pyenv"
      export PATH="$PYENV_ROOT/bin:$PATH"
      eval "$(pyenv init --path)"
      eval "$(pyenv init -)"
  loop:
    - zshrc
    - bashrc

- name: Install latest Python version with pyenv
  shell: |
    $HOME/.pyenv/bin/pyenv install 3.11.0
    $HOME/.pyenv/bin/pyenv global 3.11.0
  args:
    creates: "{{ ansible_env.HOME }}/.pyenv/versions/3.11.0"

# Install Python development tools
- name: Upgrade pip
  pip:
    name: pip
    state: latest
    executable: "{{ ansible_env.HOME }}/.pyenv/shims/pip"

- name: Install Python development tools
  pip:
    name:
      - virtualenv
      - ipython
      - black
      - flake8
      - mypy
      - pip-tools
      - pytest
      - pytest-cov
    state: latest
    executable: "{{ ansible_env.HOME }}/.pyenv/shims/pip"

    # Setup debugpy for Neovim DAP
    - name: Create .virtualenvs directory
      file:
        path: "{{ ansible_env.HOME }}/.virtualenvs"
        state: directory
        mode: '0755'

    - name: Create debugpy virtualenv
      pip:
        name: virtualenv
        state: latest
        executable: "{{ ansible_env.HOME }}/.pyenv/shims/pip"

    - name: Setup debugpy virtualenv
      shell: |
        {{ ansible_env.HOME }}/.pyenv/shims/python -m venv {{ ansible_env.HOME }}/.virtualenvs/debugpy
      args:
        creates: "{{ ansible_env.HOME }}/.virtualenvs/debugpy"

    - name: Install debugpy in dedicated virtualenv
      pip:
        name: debugpy
        state: latest
        virtualenv: "{{ ansible_env.HOME }}/.virtualenvs/debugpy"

    # Configure development tools
- name: Create Python configuration directories
  file:
    path: "{{ ansible_env.HOME }}/{{ item }}"
    state: directory
    mode: '0755'
  loop:
    - .config/pycodestyle
    - .config/flake8
    - .mypy_cache

- name: Configure flake8
  copy:
    dest: "{{ ansible_env.HOME }}/.config/flake8"
    content: |
      [flake8]
      max-line-length = 88
      extend-ignore = E203
      exclude = .git,__pycache__,build,dist,.venv

- name: Configure black
  copy:
    dest: "{{ ansible_env.HOME }}/.config/black"
    content: |
      [tool.black]
      line-length = 88
      include = '\.pyi?$'
      exclude = '''
      /(
          \.git
        | \.mypy_cache
        | \.venv
        | build
        | dist
      )/
      '''

